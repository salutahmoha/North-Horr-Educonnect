generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  emailAddress String    @unique
  username     String    @unique
  password     String
  role         String    @default("user")
  reports      Report[]  // Reports authored by the user
  comments     Comment[] // Comments made by the user
  profile      Profile?  // A user can have one profile
  likes        Like[]    // A user can like many reports and comments

  @@map("users")
}

model Report {
  id         String    @id @default(uuid())
  schoolname String
  image      String?
  body       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  owner      String
  user       User      @relation(fields: [owner], references: [id], onDelete: Cascade)
  comments   Comment[] // Comments on the report
  likes      Like[]    // Likes on the report

  @@map("reports")
}

model Comment {
  id        String    @id @default(uuid())
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  reportId  String
  parentId  String? // For nested comments

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  report    Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("ParentComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Comment[] @relation("ParentComment")
  likes     Like[]    // Likes on the comment

  @@map("comments")
}

model Profile {
  id              String   @id @default(cuid())
  phoneNumber     String
  occupation      String
  bio             String
  secondaryEmail  String   @unique
  profileImage    String?
  userId          String   @unique // Each user can have only one profile
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("profiles")
}

model Like {
  id        String  @id @default(uuid())
  userId    String
  reportId  String?
  commentId String?

  user      User    @relation(fields: [userId], references: [id])
  report    Report? @relation(fields: [reportId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, reportId])
  @@unique([userId, commentId])

   @@map("likes")
}

